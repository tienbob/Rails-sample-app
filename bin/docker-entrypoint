#!/bin/bash -e

# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)
    export LD_PRELOAD
fi

# Function to wait for PostgreSQL to be available
wait_for_postgres() {
  echo "Waiting for PostgreSQL to be available..."
  
  # Extract database URL components if DATABASE_URL is set
  if [[ -n "$DATABASE_URL" ]]; then
    # Example: postgres://username:password@hostname:port/database_name
    if [[ "$DATABASE_URL" =~ postgres://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
      DB_HOST="${BASH_REMATCH[3]}"
      DB_PORT="${BASH_REMATCH[4]}"
    else
      echo "Could not parse DATABASE_URL"
      return 1
    fi
  else
    echo "DATABASE_URL is not set"
    return 1
  fi
  
  echo "Attempting to connect to PostgreSQL at $DB_HOST:$DB_PORT..."
  
  # Wait for the PostgreSQL server to be available
  for i in {1..30}; do
    if pg_isready -h "$DB_HOST" -p "$DB_PORT" >/dev/null 2>&1; then
      echo "PostgreSQL is available"
      return 0
    fi
    echo "Waiting for PostgreSQL... attempt $i of 30"
    sleep 1
  done
  
  echo "Could not connect to PostgreSQL"
  return 1
}

# If running the rails server then create or migrate existing database
if [ "${@: -2:1}" == "./bin/rails" ] && [ "${@: -1:1}" == "server" ]; then
  echo "Starting Rails server setup..."
  echo "DATABASE_URL is set: $([ -n "$DATABASE_URL" ] && echo "YES" || echo "NO")"
  echo "DATABASE_URL length: ${#DATABASE_URL}"
  
  if [[ -n "$DATABASE_URL" ]]; then
    echo "Setting up database..."
    # Print first and last 20 characters of DATABASE_URL for debugging (without exposing full credentials)
    echo "DATABASE_URL preview: ${DATABASE_URL:0:20}...${DATABASE_URL: -20}"
    wait_for_postgres
    
    # Run database setup/migration
    echo "Running database migrations..."
    ./bin/rails db:create 2>/dev/null || echo "Database already exists"
    ./bin/rails db:migrate
    
    # Create sample users if in development/demo mode
    if [[ "$RAILS_ENV" != "production" ]] || [[ "$CREATE_SAMPLE_DATA" == "true" ]]; then
      echo "Creating sample data..."
      ./bin/rails db:seed 2>/dev/null || echo "Sample data creation skipped or failed"
    fi
    
    echo "Database setup complete"
  else
    echo "Warning: DATABASE_URL not set, skipping database setup"
  fi
fi

exec "${@}"
