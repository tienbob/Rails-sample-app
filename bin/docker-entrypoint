#!/bin/bash -e

# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)
    export LD_PRELOAD
fi

# Function to wait for PostgreSQL to be available
wait_for_postgres() {
  echo "Waiting for PostgreSQL to be available..."
  
  # Extract database URL components if DATABASE_URL is set
  if [[ -n "$DATABASE_URL" ]]; then
    # Example: postgres://username:password@hostname:port/database_name
    if [[ "$DATABASE_URL" =~ postgres://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
      DB_HOST="${BASH_REMATCH[3]}"
      DB_PORT="${BASH_REMATCH[4]}"
    else
      echo "Could not parse DATABASE_URL"
      return 1
    fi
  else
    echo "DATABASE_URL is not set"
    return 1
  fi
  
  echo "Attempting to connect to PostgreSQL at $DB_HOST:$DB_PORT..."
  
  # Wait for the PostgreSQL server to be available
  for i in {1..30}; do
    if pg_isready -h "$DB_HOST" -p "$DB_PORT" >/dev/null 2>&1; then
      echo "PostgreSQL is available"
      return 0
    fi
    echo "Waiting for PostgreSQL... attempt $i of 30"
    sleep 1
  done
  
  echo "Could not connect to PostgreSQL"
  return 1
}

# If running the rails server then create or migrate existing database
if [ "${@: -2:1}" == "./bin/rails" ] && [ "${@: -1:1}" == "server" ]; then
  if [[ -n "$DATABASE_URL" ]]; then
    wait_for_postgres
    ./bin/rails db:prepare
  fi
fi

exec "${@}"

exec "${@}"
