#!/bin/bash -e

# This script runs database migrations on Railway deployments
# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)
    export LD_PRELOAD
fi

# Function to wait for PostgreSQL to be available
wait_for_postgres() {
  echo "Waiting for PostgreSQL to be available..."
  
  # Parse the DATABASE_URL to get host and port
  if [[ -n "$DATABASE_URL" && "$DATABASE_URL" =~ postgres://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
    DB_HOST="${BASH_REMATCH[3]}"
    DB_PORT="${BASH_REMATCH[4]}"
  else
    # Use individual connection parameters if DATABASE_URL is not set
    DB_HOST="${DATABASE_HOST:-${PGHOST:-localhost}}"
    DB_PORT="${DATABASE_PORT:-${PGPORT:-5432}}"
  fi
  
  echo "Attempting to connect to PostgreSQL at $DB_HOST:$DB_PORT..."
  
  # Wait for the PostgreSQL server to be available
  for i in {1..60}; do
    if pg_isready -h "$DB_HOST" -p "$DB_PORT" >/dev/null 2>&1; then
      echo "PostgreSQL is available"
      return 0
    fi
    echo "Waiting for PostgreSQL... attempt $i of 60"
    sleep 1
  done
  
  echo "Could not connect to PostgreSQL"
  return 1
}

# Add DATABASE_URL from environment variables if not set
if [[ -z "$DATABASE_URL" && -n "$PGHOST" ]]; then
  # Construct DATABASE_URL from individual parameters
  DB_HOST="${DATABASE_HOST:-${PGHOST:-localhost}}"
  DB_PORT="${DATABASE_PORT:-${PGPORT:-5432}}"
  DB_NAME="${DATABASE_NAME:-${PGDATABASE:-sample_app_production}}"
  DB_USER="${DATABASE_USERNAME:-${PGUSER:-postgres}}"
  DB_PASS="${DATABASE_PASSWORD:-${PGPASSWORD:-}}"
  
  export DATABASE_URL="postgres://$DB_USER:$DB_PASS@$DB_HOST:$DB_PORT/$DB_NAME"
  echo "Constructed DATABASE_URL from environment variables"
fi

# Wait for PostgreSQL
wait_for_postgres

# Run database migrations
echo "Running database migrations..."
./bin/rails db:migrate

# Exit with success
echo "Database migrations completed successfully!"
exit 0
